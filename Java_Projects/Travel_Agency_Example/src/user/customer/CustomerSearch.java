/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user.customer;

import business.AirlinerDirectory;
import business.CustomerDirectory;
import business.Flight;
import business.Reservation;
import business.ReservationDirectory;
import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ruby
 */
public class CustomerSearch extends javax.swing.JPanel {
    CustomerDirectory c;
    ReservationDirectory r;
    AirlinerDirectory a;
    JPanel p;
    Reservation re;
 
    /**
     * Creates new form CustomerSearch
     * @param p
     * @param a
     * @param c
     * @param r
     */
    
    public CustomerSearch(JPanel p, AirlinerDirectory a, ReservationDirectory r, CustomerDirectory c) {
        initComponents();
        this.p = p;
        this.a = a;
        this.c = c;
        this.r = r;
        t1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                t1.setText("");
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        t2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        t3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cb1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        searchbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        reservebtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("From (City)");

        jLabel2.setText("To (City)");

        jLabel3.setText("Date");

        t1.setText("yyyy-MM-dd");

        jLabel4.setText("Prefered Departure Time");

        cb1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select Time--", "6:00-12:00", "12:00-18:00", "18:00-0:00" }));

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight ID", "Depart(City)", "Arrive(City)", "Depart(Time)", "Arrive(Time)", "Date", "Average Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl);
        if (tbl.getColumnModel().getColumnCount() > 0) {
            tbl.getColumnModel().getColumn(0).setResizable(false);
            tbl.getColumnModel().getColumn(1).setResizable(false);
            tbl.getColumnModel().getColumn(2).setResizable(false);
            tbl.getColumnModel().getColumn(3).setResizable(false);
            tbl.getColumnModel().getColumn(4).setResizable(false);
            tbl.getColumnModel().getColumn(5).setResizable(false);
            tbl.getColumnModel().getColumn(6).setResizable(false);
        }

        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel5.setText("Find a Flight");

        reservebtn.setText("Reserve");
        reservebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservebtnActionPerformed(evt);
            }
        });

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(searchbtn))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(reservebtn)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1))))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton1))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchbtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reservebtn)
                .addContainerGap(302, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reservebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservebtnActionPerformed
        // TODO add your handling code here:
        
        int selectedrow= tbl.getSelectedRow();
        if(selectedrow >=0){
            Flight f = (Flight)tbl.getValueAt(selectedrow,0);
            CustomerReserve panel = new CustomerReserve(p,c,r,f);
            p.add("customerreserve",panel);
            CardLayout layout =(CardLayout) p.getLayout();
            layout.next(p);
            
        }else
            JOptionPane.showMessageDialog(null,"Please Select Any Flight");
    }//GEN-LAST:event_reservebtnActionPerformed

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm= (DefaultTableModel)tbl.getModel();
        dtm.setRowCount(0);
        Date sc1 = null;
        Boolean e1 = null;
        Boolean e2 = null;
        Boolean e3 = null;
        Boolean e4 = null;
        Boolean e5 = null;
        Boolean e6 = null;
        Boolean e7 = null;
        Boolean e8 = null;
        if(!t1.getText().isEmpty()){
            try {
                    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    formatter.setLenient(false);
                    sc1 = formatter.parse(t1.getText());
                } catch (ParseException e) {e.printStackTrace();}
            if(sc1 == null){
                JOptionPane.showMessageDialog(null,"Invalid Date");
                e1= false;
            }else{e1=true;}
        }else{
            JOptionPane.showMessageDialog(null,"Invalid Date");
            e1= false;
        }
        
        if(cb1.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(null,"Please Select Time");
            e2=false;
        }else{e2=true;}
        
        if(t2.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Departure City Required");
            e3= false;
        }else{e3=true;}
        
        if(t3.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Arrival City Required");
            e4= false;
        }else{e4=true;}
        
        if(e1&&e2&&e3&&e4){
            
            String dt = t1.getText();
            int pdt = cb1.getSelectedIndex();
            String fc = t2.getText();
            String tc = t3.getText();
            ((DefaultTableModel)tbl.getModel()).setNumRows(0);
            ArrayList<Flight> targets = new ArrayList<Flight>();
            ArrayList<Flight> list = a.getAirliner();
            for(int i=0 ; i<list.size();i++){
                if(list.get(i).getDate().equals(dt)){e5=true;}else{e5=false;}
                if(list.get(i).getFrom().equals(fc)){e7=true;}else{e7=false;}
                if(list.get(i).getTo().equals(tc)){e8=true;}else{e8=false;}
                if(pdt==1){
                    try {
                        SimpleDateFormat parser = new SimpleDateFormat("HH:mm");
                        Date t6 = parser.parse("6:00");
                        Date t12 = parser.parse("12:00");
                        try {
                            Date userDate = parser.parse(list.get(i).getDepart());
                            if (userDate.after(t6) && userDate.before(t12)) {
                                e6=true;
                            }
                        } catch (ParseException e) {}
                    } catch (ParseException ex) {Logger.getLogger(CustomerSearch.class.getName()).log(Level.SEVERE, null, ex);}
                }
                
                if(pdt==2){
                    try {
                        SimpleDateFormat parser = new SimpleDateFormat("HH:mm");
                        Date t18 = parser.parse("18:00");
                        Date t12 = parser.parse("12:00");
                        try {
                            Date userDate = parser.parse(list.get(i).getDepart());
                            if (userDate.after(t12) && userDate.before(t18)) {
                                e6=true;
                            }
                        } catch (ParseException e) {}
                    } catch (ParseException ex) {Logger.getLogger(CustomerSearch.class.getName()).log(Level.SEVERE, null, ex);}
                }
                
                if(pdt==3){
                    try {
                        SimpleDateFormat parser = new SimpleDateFormat("HH:mm");
                        Date t18 = parser.parse("18:00");
                        Date t24 = parser.parse("23:59");
                        try {
                            Date userDate = parser.parse(list.get(i).getDepart());
                            if (userDate.after(t18) && userDate.before(t24)) {
                                e6=true;
                            }
                        } catch (ParseException e) {}
                    } catch (ParseException ex) {Logger.getLogger(CustomerSearch.class.getName()).log(Level.SEVERE, null, ex);}
                }
                
                if(e5&&e6&&e7&&e8){
                    Flight target = list.get(i);
                    Object row[]= new Object[7];
                    row[0] = target;
                    row[1] = target.getFrom();
                    row[2] = target.getTo();
                    row[3] = target.getDepart();
                    row[4] = target.getArrive();
                    row[5] = target.getDate();
                    row[6] = target.getSeatprice();
                    dtm.addRow(row);
                    targets.add(target);
                }
            }
            if(targets.size()==0){
                JOptionPane.showMessageDialog(null,"Flight Not Found");
            }
        }
    }//GEN-LAST:event_searchbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        p.remove(this);
        CardLayout layout =(CardLayout) p.getLayout();
        layout.previous(p);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reservebtn;
    private javax.swing.JButton searchbtn;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
