/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import Profile.History;
import Profile.PlaneInfo;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ruby
 */
public class SearchPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchPanel
     */
    private History ht;
    public SearchPanel(History ht) {
        initComponents();
        this.ht=ht;
        T1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                T1.setText("");
            }
        });
        T2.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                T2.setText("");
            }
        });
        T3.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                T3.setText("");
            }
        });
        T4.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                T4.setText("");
            }
        });
        
        T5.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                T5.setText("");
            }
        });
    }
   


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cb = new javax.swing.JComboBox<>();
        T1 = new javax.swing.JTextField();
        searchbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        viewbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        t9 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        t4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        t10 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        t5 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        t2 = new javax.swing.JTextField();
        t8 = new javax.swing.JTextField();
        t3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        t6 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        t7 = new javax.swing.JTextField();
        CB1 = new javax.swing.JComboBox<>();
        ta = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        T2 = new javax.swing.JTextField();
        T3 = new javax.swing.JTextField();
        T4 = new javax.swing.JTextField();
        CB2 = new javax.swing.JComboBox<>();
        CB3 = new javax.swing.JComboBox<>();
        T5 = new javax.swing.JTextField();

        cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please Select a Search Question--", "1. Find me the first available airplane.", "2. How many airplanes are currently available. How many are, otherwise.", "3. List all airplanes that are made by Boeing.", "4. List all airplanes that were manufactured in a given year, ‘x’.", "5. Find an available airplane with a minimum of x seats but no more than y seats.", "6. Find an airplane with the given serial number. List the attributes of the found airplane.", "7. List all airplanes given the model number.", "8. List all the airplane manufacturers used by the (this) airliner.", "9. When was the last time the fleet catalog was updated.", "10. List all airplanes that are available in a given airport", "11. List all airplanes that have expired maintenance certificate.", " " }));
        cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbActionPerformed(evt);
            }
        });

        T1.setText("--Please Enter a Year--");
        T1.setEnabled(false);
        T1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T1ActionPerformed(evt);
            }
        });

        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plane ID", "Update Time"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setText("Search Plane Information");

        viewbtn.setText("View Detail");
        viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Year Made");

        t9.setEnabled(false);

        jLabel7.setText("Airliner");

        t4.setEnabled(false);

        jLabel2.setText("Plane ID");

        jLabel18.setText("Maintainence Expire Date");

        t1.setEnabled(false);

        jLabel6.setText("Total Seats");

        jLabel15.setText("Model");

        t10.setEnabled(false);

        jLabel3.setText("Availability");

        t5.setEnabled(false);

        jLabel16.setText("Info Update date");

        t2.setEnabled(false);

        t8.setEnabled(false);

        t3.setEnabled(false);

        jLabel4.setText("Manufactor");

        t6.setEnabled(false);

        jLabel17.setText("Airport");

        t7.setEnabled(false);

        CB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Availability--", "Available", "Unavailable" }));
        CB1.setEnabled(false);

        jLabel8.setText("Answer");

        T2.setText("--Minimum Seats--");
        T2.setEnabled(false);
        T2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T2ActionPerformed(evt);
            }
        });

        T3.setText("--Maximum Seats--");
        T3.setEnabled(false);

        T4.setText("--Enter Serial Number--");
        T4.setEnabled(false);

        CB2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please select a Model--", "727", "737", "747", "757", "777", "787", "380" }));
        CB2.setEnabled(false);

        CB3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please Select an Airliner--", "Qatar Airways", "Singapore Airlines", "ANA All Nippon Airways", "Emirates", "Cathay Pacific", "EVA Air", "Lufthansa", "Etihad Airways", "Hainan Airlines", "Garuda Indonesia" }));
        CB3.setEnabled(false);
        CB3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CB3ActionPerformed(evt);
            }
        });

        T5.setText("--Enter an Airport--");
        T5.setEnabled(false);
        T5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ta))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(T1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(CB2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(T2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(T3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(T4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CB3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(50, 50, 50)
                                        .addComponent(T5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(searchbtn))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(viewbtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel16)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel18))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(t9)
                                                    .addComponent(t8)
                                                    .addComponent(t10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchbtn)
                    .addComponent(CB2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CB3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(t8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(t9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(t10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(164, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbActionPerformed
        // TODO add your handling code here:
        if(cb.getSelectedIndex()==2){
            CB1.setEnabled(true);
        }else{
            CB1.setEnabled(false);
        }
        if(cb.getSelectedIndex()==7){
            CB2.setEnabled(true);
        }else{
            CB2.setEnabled(false);
        }
        if(cb.getSelectedIndex()==8){
            CB3.setEnabled(true);
        }else{
            CB3.setEnabled(false);
        }
        
        if ((cb.getSelectedIndex() == 4)){
            T1.setEnabled(true);
        }else{
            T1.setEnabled(false);
            T1.setText("--Please Enter a Year--");
        }
        
        if ((cb.getSelectedIndex() == 5)){
            T2.setEnabled(true);
            T3.setEnabled(true);
        }else{
            T2.setEnabled(false);
            T2.setText("--Minimum Seats--");
            T3.setEnabled(false);
            T3.setText("--Maximum Seats--");
        }
        
        if ((cb.getSelectedIndex() == 6)){
            T4.setEnabled(true);
        }else{
            T4.setEnabled(false);
            T4.setText("--Please Enter a Serial--");
        }
        
        if ((cb.getSelectedIndex() == 10)){
            T5.setEnabled(true);
        }else{
            T5.setEnabled(false);
            T5.setText("--Please Enter an Airport--");
        }
        
    }//GEN-LAST:event_cbActionPerformed

    private String formattime(long update){
        Date dNow = new Date(update);
        SimpleDateFormat ft = 
        new SimpleDateFormat ("yyyy.MM.dd hh:mm");
        return ft.format(dNow);
    }

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        // TODO add your handling code here:
        ((DefaultTableModel)tbl.getModel()).setNumRows(0);
        ArrayList<PlaneInfo> targets = new ArrayList<PlaneInfo>();
        PlaneInfo target =null;
        ArrayList<PlaneInfo> list = ht.getHistory();
        DefaultTableModel dtm= (DefaultTableModel)tbl.getModel();
        ta.setText("");
        
        if (cb.getSelectedIndex() == 1) {
            for (int i = 0; i < list.size(); ++i) {
                if (list.get(i).isAvail()) {
                    target=list.get(i);
                    break;
                }
            }
            if (target == null) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                Object row[]= new Object[2];
                row[0] =target;
                row[1] =formattime(target.getUpdate());
                dtm.addRow(row);    
            }
        }
        
        if (cb.getSelectedIndex()==2){
            
            if(CB1.getSelectedIndex()==0){
                JOptionPane.showMessageDialog(null,"Please Select Availability");
            }
            
            if(CB1.getSelectedIndex()==1){
                for (int i = 0; i < list.size(); ++i) {
                    if (list.get(i).isAvail()) {
                        targets.add(list.get(i));
                    }
                }
                ta.setText("The number of available plane is "+String.valueOf(targets.size()));
            }
            
            if(CB1.getSelectedIndex()==2){
                for (int i = 0; i < list.size(); ++i) {
                    if (!list.get(i).isAvail()) {
                        targets.add(list.get(i));
                    }
                }
                ta.setText("The number of unavailable plane is "+String.valueOf(targets.size()));
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
            
        }
        
        if (cb.getSelectedIndex()==3){
            for (int i = 0; i < list.size(); ++i) {
                if ("Boeing".equals(list.get(i).getMft())) {
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
        }
        
        if (cb.getSelectedIndex()==4){
            int y=Integer.parseInt(T1.getText());
            for (int i = 0; i < list.size(); ++i) {
                if (list.get(i).getMadeyear()==y) {
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
        }
        
        if (cb.getSelectedIndex()==5){
            for (int i = 0; i < list.size(); ++i) {
                if 
                    (Integer.parseInt(T2.getText()) <= list.get(i).getSeats() && list.get(i).getSeats() <= Integer.parseInt(T3.getText())) 
                {
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                targets.stream().map((pi) -> {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    return row;
                }).forEachOrdered((row) -> {
                    dtm.addRow(row);
                });    
            }
        }
        
        if (cb.getSelectedIndex()==6){
            for (int i = 0; i < list.size(); ++i) {
                if(Integer.parseInt(T4.getText()) == list.get(i).getId()){
                    target=list.get(i);
                    break;
                }
            }
            
            if (target == null) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                Object row[]= new Object[2];
                row[0] =target;
                row[1] =formattime(target.getUpdate());
                dtm.addRow(row);    
            }
        }
        
        if (cb.getSelectedIndex()==7){
            for (int i = 0; i < list.size(); ++i) {
                if(Integer.parseInt((String) CB2.getSelectedItem()) == list.get(i).getModel()){
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
        }
        if (cb.getSelectedIndex()==8){
            for (int i = 0; i < list.size(); ++i) {
                if(list.get(i).getAirliner() == null ? (String)CB3.getSelectedItem() == null : list.get(i).getAirliner().equals((String)CB3.getSelectedItem())){
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                String[]a= new String[targets.size()];
                for(int i = 0; i < targets.size(); ++i){
                    a[i]= targets.get(i).getMft();
                }
                String thisline=Arrays.toString(a).replace("[", "").replace("]","");
                ta.setText("The manufacturer(s) of "+(String)CB3.getSelectedItem()+" is/are "+thisline);
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
        }
        
        if (cb.getSelectedIndex()==9){
            long max = list.get(0).getUpdate();
            for (int i = 0; i < list.size(); ++i) {
                if (list.get(i).getUpdate()>max){
                    max=list.get(i).getUpdate();
                    target=list.get(i);
                    
                }
            }
            Object row[]= new Object[2];
            row[0] =target;
            row[1] =formattime(target.getUpdate());
            dtm.addRow(row);
            String lasttime=formattime(target.getUpdate());
            ta.setText("The last time when the fleet catalog was updated was: "+ lasttime);
        }
        
        if (cb.getSelectedIndex()==10){
            for (int i = 0; i < list.size(); ++i) {
                if((list.get(i).getAirport() == null ? T5.getText() == null : list.get(i).getAirport().equals(T5.getText())) && list.get(i).isAvail()){
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
        }
        
        if (cb.getSelectedIndex() == 11) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            for (int i = 0; i < list.size(); ++i) {
                Date date = null;
                try {
                    date = sdf.parse(list.get(i).getExpdate());
                } catch (ParseException ex) {
                    Logger.getLogger(SearchPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                long millis = date.getTime();
                if (millis< System.currentTimeMillis()) {
                    targets.add(list.get(i));
                }
            }
            
            if (targets.isEmpty()) {
                JOptionPane.showMessageDialog(null,"Can't find");
            } else {
                for(PlaneInfo pi : targets)
                {
                    Object row[]= new Object[2];
                    row[0] =pi;
                    row[1] =formattime(pi.getUpdate());
                    dtm.addRow(row);
                }    
            }
        }
        
        
        
    }//GEN-LAST:event_searchbtnActionPerformed

    private void viewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbtnActionPerformed
        // TODO add your handling code here:
         int selectedrow= tbl.getSelectedRow();
        if(selectedrow >=0)
        {
            PlaneInfo pi= (PlaneInfo)tbl.getValueAt(selectedrow,0);
            t1.setText(String.valueOf(pi.getId()));
            t2.setText(formatestatus(pi.isAvail()));
            t3.setText(pi.getMft());
            t4.setText(String.valueOf(pi.getMadeyear()));
            t5.setText(String.valueOf(pi.getSeats()));
            t6.setText(pi.getAirliner());
            t7.setText(String.valueOf(pi.getModel()));
            t8.setText(formattime(pi.getUpdate()));
            t9.setText(pi.getAirport());
            t10.setText(pi.getExpdate());
        }   
        else
            JOptionPane.showMessageDialog(null,"Please Select Any Row");
    }//GEN-LAST:event_viewbtnActionPerformed

    private void T1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_T1ActionPerformed

    private void T2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T2ActionPerformed

    private void CB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CB3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CB3ActionPerformed

    private void T5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T5ActionPerformed
    
    private String formatestatus(boolean avail){
        String yes ="Available";
        String no ="Unavailable";
        if(avail){
            return yes;
        }else{
            return no;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CB1;
    private javax.swing.JComboBox<String> CB2;
    private javax.swing.JComboBox<String> CB3;
    private javax.swing.JTextField T1;
    private javax.swing.JTextField T2;
    private javax.swing.JTextField T3;
    private javax.swing.JTextField T4;
    private javax.swing.JTextField T5;
    private javax.swing.JComboBox<String> cb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchbtn;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t10;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JTextField t6;
    private javax.swing.JTextField t7;
    private javax.swing.JTextField t8;
    private javax.swing.JTextField t9;
    private javax.swing.JTextField ta;
    private javax.swing.JTable tbl;
    private javax.swing.JButton viewbtn;
    // End of variables declaration//GEN-END:variables
}
